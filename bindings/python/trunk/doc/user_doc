/*!
\page user_doc User documentation

Welcome to the users documentation of the CDMA Python bindings. If you only want
to use CDMA in your Python code you are at the right place. If you have already
had a look on the C++ and Java API documentation you may find that the Python
bindings look entirely different from what you have seen there. There is a
single reason why that is so: the primary design goal of the Python binding was
to keep the interface as simple and pythonic as possible. Consequently I have
stripped down the C++ API to a very simple Python API which considers most of
the objects in CDMA as containers. If you find that some things look quite
similar to h5py (a Python interface to HDf5) then you are entirely right: h5py
was quite an inspiration for this binding. 

\image html tree.svg CDMA data tree.
Lets start with a quick introduction to CDMA. CDMA maps files and the data
stored in them on a tree consisting of Groups, DataItems, Dimensions, and
Attributes as shown in the image above. For users acquainted with HDF5 this
picture fill look quite familiar. Indeed, except for \c Dimensions, CDMA
reproduces more or less the data organization provided by HDF5. 
Groups and DataItems can additionally hold attributes with additional meta-data. 
CDMA provides two ways to access data
    \li \it raw access - is just what you see in the figure above
    \li a dictionary based approach 

As the Python bindings do not support accessing data via dictionaries I will
leave this for the moment and focus on the raw access to data. In this mode data
is accessed by directly traversing through the data tree. 

To represent such a tree in Python cdma-python provides the following (obvious)
classes \c Group, \c Dimension, \c Attribute, \c DataItem, and \c Dataset. 
Except for the later one all of these classes are already shown in the figure
above. There is nothing mystical with \c Dataset, this type provides just an
entry level object. It provides you with the root-group of your data tree. 
So except for opening a dataset you will hardly ever use an instance of \c
Dataset. 

Now 





\section udoc_basics Baisc usage

To use CDMA from python the \c cdma module must be loaded with
\code
import cdma
\endcode
CDMA organizes data in so called datasets. To open a dataset use
\code
dataset = cdma.open_dataset("file:/path/to/file")
\endcode
\c open_dataset takes one argument which is the URL to the dataset. In this case
the dataset is a single file. A dataset itself acts as a container for groups,
data-items, and dimensions. All objects can be accessed via the root group of a
dataset which itself is a read-only attribute of the dataset object
\code
dataset.root_group
\endcode
Groups are the fundamental container types in the CDMA world. 

\subsection udoc_groups Group objects

Group objects are the primary containers in the CDMA world

\subsection udoc_dataitesm DataItem objects





\section udoc_examples Examples

In this section we will discuss the examples shipped with the source
distribution. 

\subsection udoc_ex1 ex1.py

This examples shows basic navigation and iteration over all entities in a CDMA
tree.
\includelineno ex1.py

Line 4 imports the CDMA Python bindings. In Line 7 a handler to a dataset is
opened using the \c open_dataset function. The dataset has a read-only attribute
referring to is root group. 

\subsection udoc_ex2 ex2.py
\includelineno ex2.py

\subsection udoc_ex3 ex3.py
\includelineno ex3.py

*/
