/*!
\defgroup utility_classes Utility Classes
*/

/*! 
\defgroup wrapper_classes Wrapper Classes
*/

/*! 
\page developer_doc Developmer documentation

This page tries to collate some of the design ideas behind the C++ code creating
the Python bindings. For a detailed documentation of the different classes see
    \li \ref utility_classes    
    \li \ref wrapper_classes


\section devdoc_interace Common interface for data objects

While going through the original CDMA C++ API documentation realized that some
of the data holding types, namely \c Array, \c Attribute, and \c DataItem, all
serve a similar if not equal purpose. However, all these classes showed a
different interface which pretty bad because it increases the amount of work I
would have to do to create the wrappers. Consequently I packed all these objects
in wrapper classes that expose a common interface as shown here.
\code
class DataInterface
{
    public:
    size rank() const;
    size size() const;
    TypeID type() const;
    std::vector<size_t> shape() const;

    //read scalar data 
    template<typename T> T get() const;
    //read data from position
    template<typename T> T get(const std::vecotr<size_t> &pos) const; 
    //read region 
    ArrayWrapper get(const std::vector<size_t> offset,
                     const std::vector<size_t> shape) const;
      

};
\endcode
Do not expect to find somewhere a class named DataInterface - this is just a
name for the interface I use here.




*/
