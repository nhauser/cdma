#summary C++ client application development guide.

*Content*
 * [#Requirements Requirements]
 * [#Setting_up_The_CDMA_library Setting up The CDMA library]
 * [#Getting_access_to_a_dataset Getting access to a dataset]
 * [#Choosing_the_access_mode Choosing the access mode]

= Requirements =

The YAT library v1.7.7 or higher.

== Linux ==

You should compile using gcc v4.4.2 or higher

== Windows ==

You should compile using VC8 or higher

If you are not using Maven to compile your project you need the following libraries:

 * Iconv v1.9.2 or higher
 * Xml2 v2.7.8 or higher

Windows binaries are available from this web site: [http://www.zlatkovic.com/libxml.en.html]

= Setting up The CDMA library =

CDMA classes are accessible through the namespace `cdma`.
The main class a C++ client uses is {{{cdma::Factory}}}. This is a singleton object. Every C++ client must begin and ending with it:

{{{
#include <cdma/Factory.h>
#include <cdma/IFactory.h>
#include <cdma/navigation/IDataset.h>

int main(int argc,char *argv[])
{
  
  ...
  
  // The first action is the Factory initialization
  cdma::Factory::init( "Plugins_path" );

  ...

  // Calling the cleanup method is necessary to ensure
  // the correct termination of the CDMA core library
  cdma::Factory::cleanup();
}
}}}

= Getting access to a dataset =

A CDMA dataset is a handle for all the data of one experiment.
Getting access to a dataset is done through the CDMA factory. This sample show how to proceed:

{{{
// Return a std::pair object containing two references:
// - to the dataset
// - to the plug-in factory used
DatasetFactoryPair datasetFactoryPair = cdma::Factory::openDataset("path/to/my/dataset");

IDatasetPtr dataset_ptr = datasetFactoryPair.first;
}}}

It's necessary to keep alive the plug-in factory reference ({{{datasetFactoryPair.second}}} is the sample code above) until the reference to the dataset ({{{datasetFactoryPair.first}}}) is dropped.

As you can read it, most CDMA methods returns references which are smart pointers on object. These smart pointers are of yat::SharedPtr type (very similar to type `boost::shared_ptr` with compatible signatures).

= Choosing the access mode =

The CDMA library offers two way of accessing data.

== Standard (physical) way ==
The so called _standard_ way needs a perfect knowledge of the data organization, like for all others data access API. You would choose this way for a strictly local program and only if you are absolutely sure there is no need to share it.

{{{
// Returns the physical root group
// Thus, all subsequents calls to sub-groups and dataitems will be based on 
// the physical data organization.
IGroupPtr root_ptr = dataset_ptr->getRootGroup();
}}}

== Using the dictionary mechanism ==

The other way of accessing data uses the dictionary mechanism. It allows writing applications with no need to know something about the data organization. Thus applications using this mechanism can access data regardless the way they are stored without need to change their source code.

In order to be able to use the dictionary mechanism, a data definition document have to be selected. This kind of XML document is called a _view_. All view documents must be suffixed by '`_view`' ('my_app_view.xml', 'my_other_app_view.xml'). To select the view insert the following code:

{{{
// View (data definition document) selection
cdma::Factory::setActiveView("my_app");
}}}

We now can get an handle to the logical root group, and get access to the data items

{{{
// Returns the logical root group
// Thus, all subsequents calls to sub-groups and dataitems will be based on 
// a logical data organization driven by a data definition document.
LogicalGroupPtr root_ptr = dataset_ptr->getLogicalRoot();

IDataItemPtr a_item_ptr = root_ptr->getDataItem("a_key_name");
}}}