#summary This page presents briefly the CDMA Utilities project.

= Introduction =

The CDMA Utilities project aims to provide some tools to ease development of CDMA projects. It can use directly the API, give utilities for plug-in development, plug-in deployment or for the client side.

It is compound of the following categories:
  * [#Client_API client API]
  * [#Deployment deployment]
  * [#Configuration configuration]
  * [#Performance performance]


= Client API =

= Deployment =

= Configuration =

The _configuration_ package *should be used only when developing a plug-in*. It aims to provide a centralized and flexible mechanism of configuring a plug-in. Indeed a plug-in can have several different configurations according its datasets. 

For example two different datasets from a same institute can have different data models. It's the case at Soleil: data are not stored the same way according the beamline they come from.

It permits for a particular dataset to define some values. They can be constant or determined by the content of the dataset.

The _ConfigDataset_ is used to resolve parameters according a data source. For example it can be getting a parameter called 'OptimalBufferSize' for a specific data source, or a parameter 'DataModelName' that should permits describing a particular mapping file to use. A parameter that is what ever the plug-in needs, at run-time, constantly defined or dynamically determined.

The _ConfigManager_ retrieves which _ConfigDataset_ is associated to a particular dataset. It can manage several configurations at a same time.

== Configuration file ==

The configuration is stored in a *XML file* that must be deployed in the plug-in's dictionary mapping folder. That file must respect the DTD _configuration_file.dtd_, that is provided in the _resources_.

The XML file can store as many configurations as requested by the plug-in. Configurations are tested sequentially to determine which one should be applied. Each configuration (markup _dataset_model_) can be cut in 3 sections:
 * criteria that permits to determine if that configuration fits the dataset
 * parameters that permits to resolve dynamically parameters by analysing the data file
 * plugin that are named constant 

=== Criteria section ===

The criteria section is a composition of some tests (_if_ markup) to succeed so it can be applied to the dataset: *each test must be validated*.

{{{
  <dataset_model name="sample_config">
    <criteria>
      <if exist="true" target="/{NXentry}/scan_data{NXdata}/time_1" />
      <if equal="scanserver" target="/{NXentry}/acquisition_model" />
    </criteria>
    ...
  </dataset_model>
}}}

The _target_ attribute corresponds to a path in the data source that *will be only interpreted by the plug-in*.

Each test must have a target attribute so the mechanism can know what to test. Possible type of tests in the criteria section:
 * _exist_ attribute having for value _true_ or _false_
 * _equal_ attribute having a string value that the content of the target path must be equal to
 * _not_equal_ attribute having a string value that the content of the target path must not be equal to



=== Parameters section ===

=== Global section ===

The global section is applied to all configurations but it can be override if needed by a particular one. All parameters here are named constants.

== How to use ==

{

}

= Performance =