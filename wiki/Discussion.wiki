#summary One-sentence summary of this page.

= Introduction =

Developers Corner. Discussing development of the CDMA project.


= Namespaces =

For the time being there are not too many plugins and engines available for CDMA. Consequently the number of classes implementing various interfaces provided by abstract classes in the CDMA core implementation is rather low and it might be convenient to use prefixes to identify the various classes of a particular engine or plugin. However with an increasing number of file formats supported and plugins being developed such an approach becomes difficult to manage. 

To solve this problem I suggest to sort the different components into a couple of namespaces with the following layout:
  * all core components go to `cdma::core`
  * engines below `cdma::engines::<enginename>`
  * and plugins to `cdma::plugins::<pluginname>`
Thus, the components of an engine reading `SPEC` files would reside below `cdma::engines::spec` and those of a plugin for DESY data will be available und `cdma::plugins::desy`. A plugin or engine developer must only find a unique name for the plugin or engine which will be used as a namespace. This makes an additional coding guide-line possible: all implementation of interfaces provided by a plugin or engine have the same name as the interface without the leading `I` (`IDataItem` will become `DataItem`). This would make it easier for other developers to find the interface implementations in the code of a particular engine or plugin. 
