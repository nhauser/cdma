#summary Java client application development guide.

*Content*
 * [#Requirements Requirements]
 * [#Setting_up_The_CDMA_library Setting up The CDMA library]
 * [#Getting_access_to_a_dataset Getting access to a dataset]
 * [#Choosing_the_access_mode Choosing the access mode]

= Requirements =

== Mandatory ==
To make the CDMA working the following is required:
 * to have the CDMA core package in class path
 * to have the OSGI bundle in class path (available from eclipse update site)
 * to have the JDom bundle in class path (available from eclipse update site)

== Optional Extended Dictionary mechanism ==

To use the Extended Dictionary mechanism, two things are required:
 * a system property <i>CDM_DICTIONARY_PATH</i> declaring where to find view dictionaries

[http://cdma.googlecode.com/svn/wiki/images/java_sys_prop.png]

 * having installed mapping dictionaries into sub-folder having the same name as the plug-in they belong to

[http://cdma.googlecode.com/svn/wiki/images/java_deploy_folder.png]


= Setting up The CDMA library =

CDMA classes are accessible through the package `org.gumtree.data`.
The main class a Java client uses is {{{org.gummtree.data.Factory}}}. This is a singleton object.


= Getting access to a dataset =

A CDMA dataset is a handle for all the data of one experiment.
Getting access to a dataset is done through the CDMA factory. This sample show how to proceed:

{{{
// Return a std::pair object containing two references:
// - to the dataset
// - to the plug-in factory used
DatasetFactoryPair datasetFactoryPair = cdma::Factory::openDataset("path/to/my/dataset");

IDatasetPtr dataset_ptr = datasetFactoryPair.first;
}}}

As you can read it, most CDMA methods returns references which are smart pointers on object. These smart pointers are of yat::SharedPtr type (very similar to type `boost::shared_ptr` with compatible signatures).

= Choosing the access mode =

The CDMA library offers two way of accessing data.

== Standard (physical) way ==
The so called _standard_ way needs a perfect knowledge of the data organization, like for all others data access API. You would choose this way for a strictly local program and only if you are absolutely sure there is no need to share it.

{{{
// Returns the physical root group
// Thus, all subsequents calls to sub-groups and dataitems will be based on 
// the physical data organization.
IGroupPtr root_ptr = dataset_ptr->getRootGroup();
}}}

We can now browse the dataset to get data items

{{{
IGroupPtr a_group_ptr = root_ptr->getGroup("sub_group");
IDataItemPtr a_item_ptr = a_group_ptr ->getDataItem("dataitem_name");
}}}

== Using the dictionary mechanism ==

The other way of accessing data uses the dictionary mechanism. It allows writing applications with no need to know something about the data organization. Thus applications using this mechanism can access data regardless the way they are stored without need to change their source code.

In order to be able to use the dictionary mechanism, a data definition document have to be selected. This kind of XML document is called a _view_. All view documents must be suffixed by '`_view`' ('my_app_view.xml', 'my_other_app_view.xml'). To select the view insert the following code:

{{{
// View (data definition document) selection
cdma::Factory::setActiveView("my_app");
}}}

We now can get an handle to the logical root group, and get access to the data items

{{{
// Returns the logical root group
// Thus, all subsequents calls to sub-groups and dataitems will be based on 
// a logical data organization driven by a data definition document.
LogicalGroupPtr root_ptr = dataset_ptr->getLogicalRoot();

IDataItemPtr a_item_ptr = root_ptr->getDataItem("a_key_name");
}}}

= Reading data =

Once you get a data item through a reference to a IDataItem object, you may want to read its value. Data is accessible through Array objects. A array can handle all type of data, starting from scalar (single value) to multi-dimensional values.

Using the generic method is applicable to all data kind:

{{{
IArrayPtr array_ptr = a_item_ptr->getData();
}}}

If the data is assumed to be a single value (scalar type), you can use a dedicated set of convenience methods like:

{{{
double double_value = double_type_item_ptr->readScalarDouble();
int integer_value = integer_type_item_ptr->readScalarInt();
}}}

If the actual value does not match the requested type, it is converted.