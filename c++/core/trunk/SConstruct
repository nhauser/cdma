from os import path
import os

###================================================================================
# The names under which a library can be used depend heavily on the operating 
# system. Unix provides the most detailed naming scheme depending on three 
# parameters:
#  libname ............. the name of the library
#  version ............. the API version of the library
#  soversion ........... the ABI version of the library
#
# On Linux a shared object is available under three names following the
# following naming convention
# lib<libname>.so.<soversion>.<version>
# lib<libname>.so.<soversion>
# lib<libname>.so
#
# The functions defined in this section create the appropriate names for the 
# library target and add them to the build environment.
#

def create_full_libname(env):
    rstr = env["LIBPREFIX"]+env["LIBNAME"]
    if os.name == "posix":
        rstr += env["SHLIBSUFFIX"]+"."+env["SOVERSION"]+"."+env["VERSION"]
    if os.name == "nt":
        rstr += "."+env["SOVERSION"]+"."+env["VERSION"]+env["SHLIBSUFFIX"]
    env.Append(LIBFULLNAME = rstr) 

def create_so_libname(env):
    rstr = env["LIBPREFIX"]+env["LIBNAME"]
    if os.name == "posix":
        rstr += env["SHLIBSUFFIX"]+"."+env["SOVERSION"]
    if os.name == "nt":
        rstr += "."+env["SOVERSION"]+env["SHLIBSUFFIX"]

    env.Append(LIBSONAME = rstr)

def create_link_libname(env):
    rstr = env["LIBPREFIX"]+env["LIBNAME"]+env["SHLIBSUFFIX"]
    env.Append(LIBLINKNAME = rstr)
        
    
#======================add options=============================================
AddOption("--with-cpp11",dest="with_cpp11",action="store_true",default=False)
AddOption("--with-debug",dest="debug",action="store_true",default=False)


#===================set build variables========================================
vars = Variables("BuildConfig.py")
vars.Add(PathVariable("YATINC","YAT include directory","/usr/include",
         PathVariable.PathAccept))
vars.Add(PathVariable("YATLIB","YAT library directory","/usr/lib",
         PathVariable.PathAccept))

vars.Add("SOVERSION","ABI version of the core libraray","")
vars.Add("VERSION","API version of the core libraray","")
vars.Add("LIBNAME","Name of the core library","")
vars.Add("DOCDIR","Installation directory of documentation","")
vars.Add("LIBDIR","Installation directory of the libraray","")
vars.Add("INCDIR","Installation directory of the header files","")
vars.Add("PREFIX","Installation prefix","/usr/local")


#=====================create the basic build environment=======================
env = Environment(variables=vars,tools=["default","textfile"])
env.ParseConfig('pkg-config --libs --cflags libxml-2.0')
env.ParseConfig('pkg-config --libs --cflags yat')

#===================create and export the core environment=====================
core_env = env.Clone()
#set library name environment variables
create_full_libname(core_env)
create_so_libname(core_env)
create_link_libname(core_env)

if os.name == "posix":
    #add special link flag to ensure that the soname of the library is 
    #entioned in the ELF header
    core_env.Append(LINKFLAGS=["-Wl,-h${LIBSONAME}"]) 

#manage installation paths
if env["LIBDIR"]:
    core_env.Append(LIBDIR=env["LIBDIR"])
else:
    core_env.Append(LIBDIR=os.path.join(env["PREFIX"],"lib"))

if env["INCDIR"]:
    core_env.Append(INCDIR=env["INCDIR"])
else:
    core_env.Append(INCDIR=os.path.join(env["PREFIX"],"include"))

if env["DOCDIR"]:
    core_env.Append(DOCDIR=env["DOCDIR"])
else:
    core_env.Append(DOCDIR=os.path.join(env["PREFIX"],"share/doc/libcdmacore"))

#==============================================================================
#set default compiler flags
if GetOption("with_cpp11"):
    core_env.AppendUnique(CPPFLAGS=["-std=c++0x"])

if GetOption("debug"):
    core_env.AppendUnique(CPPFLAGS=["-g","-O0"])

#===================start here with configuration==============================
conf = Configure(core_env)

if not conf.CheckLib("yat",language="C++"):
    print "YAT library not installed!"
    Exit(1)

core_env = conf.Finish()

Export("core_env")

#=======================call SConscript files==================================
SConscript(["src/SConscript"])
SConscript(["doc/SConscript"])
